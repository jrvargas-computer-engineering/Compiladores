%{
    #include "tokens.h"
%}

%option noyywrap
%option yylineno

%%
tipo     { return TK_TIPO;}
var      { return TK_VAR; }
senao    { return TK_SENAO; }
decimal  { return TK_DECIMAL; }
se       { return TK_SE; }
inteiro  { return TK_INTEIRO; }
retorna  { return TK_RETORNA; }
enquanto { return TK_ENQUANTO; }
com      { return TK_COM; }
[0-9]*\.[0-9]+[a-zA-Z_]+    { return TK_ER;}
[0-9]+[a-zA-Z_]+    { return TK_ER;}
[0-9]*\.[0-9]+  { return TK_LI_DECIMAL;}
[0-9]+  { return TK_LI_INTEIRO;}
[a-z_][a-z0-9_]* { return TK_ID;}
\<= { return TK_OC_LE; }
>=  { return TK_OC_GE; }
==  { return TK_OC_EQ; }
!=  { return TK_OC_NE; }
:=  { return TK_ATRIB; }
->  { return TK_SETA;  }
[!*/%+\-<>[()=,;&|\]] { return yytext[0]; }
[ \t\n]+   /* espaços em branco */
"//"[^\n]* /*comentarios com // */
. { return TK_ER; }
%%

int get_line_number() {
    return yylineno;
}


/*
int main (int argc, char **argv) {
    int token = 0;
    while ((token = yylex())){
        printf("token: %i", &token);
    // faça algo com o token
    // consulte o lexema com yytext
    }
    return 0;
}
*/
